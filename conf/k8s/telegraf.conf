# [[inputs.metaserver]]
#     docker_networks = ["host", "bridge"]
#     field_keys = $INPUT_METASERVER_FIELD_KEYS
#     tag_keys = $INPUT_DOCKER_TAG_KEYS
#     ip_key = "POD_IP"
#     etc_path = "/rootfs/etc"
#     proc_path = "/rootfs/proc"

# kubelet
[[inputs.prometheus]]
  interval = "1m"
  urls = ["http://$HOST_IP:10255"]
  name_override = "kubernetes_kubelet"
  metric_version = 2
  fieldpass = [
    "kubelet_running_pod_count",
    "kubelet_running_container_count",
    "volume_manager_total_volumes",
    "kubelet_node_config_error",
    "kubelet_runtime_operations_total",
    "kubelet_runtime_operations_errors_total",
    "kubelet_runtime_operations_duration_seconds",
    "kubelet_pod_start_duration_seconds",
    "Kubelet_pod_worker_duration_seconds",
    "storage_operation_duration_seconds",
    "storage_operation_errors_total",
    "storage_operation_duration_seconds",
    "kubelet_cgroup_manager_duration_seconds",
    "kubelet_pleg_relist_interval_seconds",
  ]

# kube_proxy
[[inputs.prometheus]]
  interval = "1m"
  urls = ["http://localhost:10249"]
  name_override = "kubernetes_kube_proxy"
  metric_version = 2
  fieldpass = [
    "rest_client_request_duration_seconds",
    "kubeproxy_sync_proxy_rules_duration_seconds",
    "rest_client_requests_total"
  ]

[[inputs.global_kubernetes]] # 共享 kubernetes client, 不主动采集数据
    k8s_timeout = "${K8S_TIMEOUT:20s}"

[[inputs.global_kubelet]]
    gather_pods = true

